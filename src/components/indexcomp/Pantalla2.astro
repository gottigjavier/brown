  <div
    id="hotel-ext1"
    style="width: 100vw; height: 100vh;"
    >
  </div>
  <script type="module">
    import { Viewer, utils } from "@photo-sphere-viewer/core";
    import { AutorotatePlugin } from "@photo-sphere-viewer/autorotate-plugin";
    
    const animatedValues = {
      pitch: { start: -Math.PI / 2, end: 0 },
      yaw: { start: Math.PI / 2, end: 0 },
      zoom: { start: 0, end: 50 },
      maxFov: { start: 130, end: 90 },
      fisheye: { start: 2, end: 0 },
    };

    // declare the custom element
class CustomScroll2Button extends HTMLElement {
    constructor() {
        super();

        const dom = this.attachShadow({ mode: 'closed' });

        const style = document.createElement('style');
        style.innerText = `
:host {
    display: flex;
    align-items: center;
    padding: 0 5px;
    opacity: 0.8;
    
}
`;
        dom.appendChild(style);

        const scroll2 = document.createElement('span');
        scroll2.id = 'scroll2';
        dom.appendChild(scroll2);

        this.aUp2 = document.createElement('a');
        this.aUp2.href = '#pantalla1';
        this.aUp2.id = 'aUp2'
        this.aUp2.title = 'Pantalla Previa';
        this.aUp2.style = 'margin: 0 5px;'
        this.imgUp2 = document.createElement('img');
        this.imgUp2.src = '/up.png';
        this.imgUp2.width = '25'
        this.aUp2.appendChild(this.imgUp2);
        scroll2.appendChild(this.aUp2);
        
        this.aDown2 = document.createElement('a');
        this.aDown2.href = '#pantalla3';
        this.aDown2.id = 'aDown2';
        this.aDown2.title = 'Pantalla Siguiente';
        this.aDown2.style = 'margin: 0 5px;'
        this.imgDown2 = document.createElement('img');
        this.imgDown2.src = '/down.png';
        this.imgDown2.width = '25'
        this.aDown2.appendChild(this.imgDown2);
        scroll2.appendChild(this.aDown2);

    }

}

// register the custom element
customElements.define('scroll2-button', CustomScroll2Button);



    const viewer = new Viewer({
      container: document.querySelector("#hotel-ext1"),
      panorama: "hotel-ext111.avif",
      caption: "<b>|360º| Hotelería Inmobiliario Eventos</b>",
      defaultPitch: animatedValues.pitch.start,
      defaultYaw: animatedValues.yaw.start,
      defaultZoomLvl: animatedValues.zoom.start,
      maxFov: animatedValues.maxFov.start,
      fisheye: animatedValues.fisheye.start,
      mousemove: false,
      mousewheel: false,
      navbar: [
        "autorotate",
        "zoom",
        {
          title: "Inicio Animación",
          content: "<b>&#x2940;</b>",
          onClick: reset,
        },
        "caption",
        {
          content: document.createElement('scroll2-button'),
        },
        "fullscreen",
      ],
      plugins: [
        [
          AutorotatePlugin,
          {
            autostartDelay: null,
            autostartOnIdle: false,
            autorotatePitch: 0,
          },
        ],
      ],
    });

    const autorotate = viewer.getPlugin(AutorotatePlugin);

    let isInit = true;

    // setup timer for automatic animation on startup
    viewer.addEventListener(
      "ready",
      () => {
        viewer.navbar.hide();

        setTimeout(() => {
          if (isInit) {
            intro(animatedValues.pitch.end, animatedValues.pitch.end);
          }
        }, 2000);
      },
      { once: true }
    );

    // launch animation to clicked point
    viewer.addEventListener("click", ({ data }) => {
      if (isInit) {
        intro(data.pitch, data.yaw);
      }
    });

    viewer.container.addEventListener("mouseleave", () => {
      autorotate.stop();
    });

    document.addEventListener("touchstart", () => {
      autorotate.stop();
    },
    false);

    // perform the intro animation
    function intro(pitch, yaw) {
      isInit = false;
      autorotate.stop();
      viewer.navbar.hide();

      new utils.Animation({
        properties: {
          ...animatedValues,
          pitch: { start: animatedValues.pitch.start, end: pitch },
          yaw: { start: animatedValues.yaw.start, end: yaw },
        },
        duration: 2500,
        easing: "inOutQuad",
        onTick: (properties) => {
          viewer.setOptions({
            fisheye: properties.fisheye,
            maxFov: properties.maxFov,
          });
          viewer.rotate({ yaw: properties.yaw, pitch: properties.pitch });
          viewer.zoom(properties.zoom);
        },
      }).then(() => {
        autorotate.stop();
        viewer.navbar.show();
        viewer.setOptions({
          mousemove: true,
          mousewheel: false,
        });
      });
    }

    // perform the reverse animation
    function reset() {
      isInit = true;
      autorotate.stop();
      viewer.navbar.hide();
      viewer.setOptions({
        mousemove: false,
        mousewheel: false,
      });

      new utils.Animation({
        properties: {
          pitch: {
            start: viewer.getPosition().pitch,
            end: animatedValues.pitch.start,
          },
          yaw: {
            start: viewer.getPosition().yaw,
            end: animatedValues.yaw.start,
          },
          zoom: {
            start: viewer.getZoomLevel(),
            end: animatedValues.zoom.start,
          },
          maxFov: {
            start: animatedValues.maxFov.end,
            end: animatedValues.maxFov.start,
          },
          fisheye: {
            start: animatedValues.fisheye.end,
            end: animatedValues.fisheye.start,
          },
        },
        duration: 2500,
        easing: "inOutQuad",
        onTick: (properties) => {
          viewer.setOptions({
            fisheye: properties.fisheye,
            maxFov: properties.maxFov,
          });
          viewer.rotate({ yaw: properties.yaw, pitch: properties.pitch });
          viewer.zoom(properties.zoom);
        },
      });
    }
  </script>